// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered tool to generate variations on existing testimonial text for A/B testing and content refreshment.
 *
 * - generateTestimonialVariations - A function that handles the testimonial variations generation process.
 * - GenerateTestimonialVariationsInput - The input type for the generateTestimonialVariations function.
 * - GenerateTestimonialVariationsOutput - The return type for the generateTestimonialVariations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTestimonialVariationsInputSchema = z.object({
  testimonialText: z.string().describe('The original testimonial text.'),
  numberOfVariations: z.number().describe('The number of variations to generate.').default(3),
});
export type GenerateTestimonialVariationsInput = z.infer<typeof GenerateTestimonialVariationsInputSchema>;

const GenerateTestimonialVariationsOutputSchema = z.object({
  variations: z.array(z.string()).describe('An array of testimonial variations.'),
});
export type GenerateTestimonialVariationsOutput = z.infer<typeof GenerateTestimonialVariationsOutputSchema>;

export async function generateTestimonialVariations(input: GenerateTestimonialVariationsInput): Promise<GenerateTestimonialVariationsOutput> {
  return generateTestimonialVariationsFlow(input);
}

const generateTestimonialVariationsPrompt = ai.definePrompt({
  name: 'generateTestimonialVariationsPrompt',
  input: {schema: GenerateTestimonialVariationsInputSchema},
  output: {schema: GenerateTestimonialVariationsOutputSchema},
  prompt: `You are a marketing expert tasked with generating variations of customer testimonials.

  Given the following testimonial, generate {{{numberOfVariations}}} variations that maintain the original sentiment but use different wording and phrasing. The variations should sound authentic and believable.

  Original Testimonial: {{{testimonialText}}}

  Variations:
  `,config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const generateTestimonialVariationsFlow = ai.defineFlow(
  {
    name: 'generateTestimonialVariationsFlow',
    inputSchema: GenerateTestimonialVariationsInputSchema,
    outputSchema: GenerateTestimonialVariationsOutputSchema,
  },
  async input => {
    const {output} = await generateTestimonialVariationsPrompt(input);
    return output!;
  }
);
